import pandas as pd
import matplotlib.pyplot as plt
import os

# Load the compression results datasets
low_path = "../compression_results_low.csv"
high_path = "../compression_results_high.csv"

df_low = pd.read_csv(low_path)
df_high = pd.read_csv(high_path)

# Add a column to distinguish between datasets
df_low["repetitivity"] = "Low Repetitivity"
df_high["repetitivity"] = "High Repetitivity"

# Combine the two dataframes
df = pd.concat([df_low, df_high])

# Create figure with two subplots for comprehensive analysis
fig, axes = plt.subplots(2, 1, figsize=(12, 10), sharex=True)

# Calculate statistics for mean and standard deviation
stats = df.groupby(["p_value", "repetitivity"]).agg(
    mean_nodes=("num_new_nodes", "mean"),
    std_nodes=("num_new_nodes", "std"),
    mean_trans=("num_new_transitions", "mean"),
    std_trans=("num_new_transitions", "std")
).reset_index()

# --- First Graph: Number of New Nodes Comparison ---
for rep in ["Low Repetitivity", "High Repetitivity"]:
    sub = stats[stats["repetitivity"] == rep]
    axes[0].errorbar(sub["p_value"], sub["mean_nodes"], yerr=sub["std_nodes"], 
                     label=rep, marker="o", capsize=4)

axes[0].set_title("Comparison of New Nodes Created During Trie Compression\nby Repetitivity Level", fontsize=12, pad=15)
axes[0].set_ylabel("Number of New Nodes", fontsize=11)
axes[0].legend(loc='upper right')
axes[0].grid(True, alpha=0.3)

# --- Second Graph: Number of New Transitions Comparison ---
for rep in ["Low Repetitivity", "High Repetitivity"]:
    sub = stats[stats["repetitivity"] == rep]
    axes[1].errorbar(sub["p_value"], sub["mean_trans"], yerr=sub["std_trans"], 
                     label=rep, marker="o", capsize=4)

axes[1].set_title("Comparison of New Transitions Created During Trie Compression\nby Repetitivity Level", fontsize=12, pad=15)
axes[1].set_xlabel("p", fontsize=11)
axes[1].set_ylabel("Number of New Transitions", fontsize=11)
axes[1].legend(loc='upper right')
axes[1].grid(True, alpha=0.3)

# Remove automatic title generated by pandas and improve layout
plt.suptitle('')  # Remove any default suptitle
plt.tight_layout()

# Create output directory if it doesn't exist
output_dir = "output_plots"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Save the plots in multiple formats
plot_filename = "high_low_comparison"
formats = ['png', 'pdf', 'svg']

for fmt in formats:
    filepath = os.path.join(output_dir, f"{plot_filename}.{fmt}")
    plt.savefig(filepath, format=fmt, dpi=300, bbox_inches='tight')
    print(f"Plot saved as: {filepath}")

# Display the plot
plt.show()